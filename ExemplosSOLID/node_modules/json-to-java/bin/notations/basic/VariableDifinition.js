"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const J2JError_1 = tslib_1.__importDefault(require("../../utils/J2JError"));
const json_1 = require("../../utils/json");
const QuickConsole_1 = tslib_1.__importDefault(require("../../utils/QuickConsole"));
const BaseWithName_1 = tslib_1.__importDefault(require("../BaseWithName"));
function parseVariableDifinitions(emitter, fieldName, receiver, argumentJson, currentIndent) {
    argumentJson.forEach((argument, index) => {
        if (json_1.JsonUtil.isJsonObject(argument)) {
            receiver.push(new JavaVariableDifinition(currentIndent, argument));
        }
        else {
            throw J2JError_1.default.elementTypeError(emitter, fieldName, index, length, Object);
        }
    });
}
exports.parseVariableDifinitions = parseVariableDifinitions;
class JavaVariableDifinition extends BaseWithName_1.default {
    constructor(currentIndent, json) {
        super(currentIndent, json.name);
        this.final = false;
        this.type = '';
        this.nameWhenAsEmitter = 'VariableDifinition';
        if ('final' in json) {
            if (typeof json.final === 'boolean') {
                this.final = json.final;
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'final', Boolean);
            }
        }
        if ('type' in json) {
            if (typeof json.type === 'string') {
                this.type = json.type;
            }
            else {
                throw J2JError_1.default.typeError(this, 'type', String);
            }
        }
        else {
            throw J2JError_1.default.fieldNotDefined(this, 'type');
        }
    }
    toString() {
        return `${this.final ? 'final ' : ''}${this.type} ${this.name}`;
    }
}
exports.default = JavaVariableDifinition;
