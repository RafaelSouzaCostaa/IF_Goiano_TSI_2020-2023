"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const J2JError_1 = tslib_1.__importDefault(require("../../utils/J2JError"));
const json_1 = require("../../utils/json");
const Base_1 = tslib_1.__importDefault(require("./statements/Base"));
const If_1 = tslib_1.__importDefault(require("./statements/If"));
const While_1 = tslib_1.__importDefault(require("./statements/While"));
function parseJavaStatements(receiver, statementJson, currentIndent) {
    const nameWhenAsEmitter = 'Statement';
    statementJson.forEach(statementItem => {
        if (typeof statementItem === 'string') {
            receiver.push(statementItem);
        }
        else if (json_1.JsonUtil.isJsonArray(statementItem)) {
            const subReceiver = [];
            parseJavaStatements(subReceiver, statementItem, currentIndent + 1);
            receiver.push(subReceiver);
        }
        else if (json_1.JsonUtil.isJsonObject(statementItem)) {
            switch (statementItem.type) {
                case 'if': {
                    receiver.push(new If_1.default(currentIndent, statementItem));
                    break;
                }
                case 'while': {
                    receiver.push(new While_1.default(currentIndent, statementItem));
                    break;
                }
                default: {
                    throw new J2JError_1.default(nameWhenAsEmitter, 'Unaccepted type of a statement (in form of JsonObject): ' + statementItem.type);
                }
            }
        }
        else {
            throw new J2JError_1.default(nameWhenAsEmitter, 'JsonType is not accepted in statement: ' + JSON.stringify(statementItem));
        }
    });
}
exports.parseJavaStatements = parseJavaStatements;
/**
 * convert [ 'stmt1 {', ['sub-stmt'], '}' ] into string like:
 * 'stmt1 {\n    sub-stmt\n}\n'
 */
function JavaStatementToString(stmtArr, indenter, depth = 1) {
    let result = '';
    stmtArr.forEach(stmt => {
        let isStatmentObject = false;
        if (stmt instanceof Base_1.default) {
            isStatmentObject = true;
            stmt = stmt.toJavaStatement();
        }
        if (typeof stmt === 'string') {
            result += `\n${indenter(depth)}${stmt}`;
        }
        else {
            result += JavaStatementToString(stmt, indenter, depth + (isStatmentObject ? 0 : 1));
        }
    });
    return result;
}
exports.JavaStatementToString = JavaStatementToString;
