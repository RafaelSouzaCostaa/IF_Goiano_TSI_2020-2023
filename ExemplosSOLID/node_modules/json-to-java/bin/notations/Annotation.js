"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const J2JError_1 = tslib_1.__importDefault(require("../utils/J2JError"));
const json_1 = require("../utils/json");
const QuickConsole_1 = tslib_1.__importDefault(require("../utils/QuickConsole"));
const BaseWithName_1 = tslib_1.__importDefault(require("./BaseWithName"));
function parseAnnotations(emitter, fieldName, receiver, annotationJson, currentIndent) {
    annotationJson.forEach((annotation, index) => {
        if (json_1.JsonUtil.isJsonObject(annotation)) {
            receiver.push(new JavaAnnotation(currentIndent, annotation));
        }
        else {
            throw J2JError_1.default.elementTypeError(emitter, fieldName, index, annotationJson.length, Object);
        }
    });
}
exports.parseAnnotations = parseAnnotations;
class JavaAnnotation extends BaseWithName_1.default {
    constructor(currentIndent, json) {
        super(currentIndent, json.name);
        this.values = null;
        this.nameWhenAsEmitter = 'Annotation';
        if ('values' in json) {
            if (typeof json.values === 'string') {
                this.values = json.values;
            }
            else if (json_1.JsonUtil.isJsonObject(json.values)) {
                this.values = lodash_1.default.mapValues(json.values, (value, key) => {
                    if (typeof value !== 'string') {
                        QuickConsole_1.default.warnValueTypeOfKey(this, 'values', key, String);
                        return String(value);
                    }
                    return value;
                });
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'values', [String, Object]);
            }
        }
    }
    toString() {
        return '' +
            `\n${this.currentIndentString}` +
            `@${this.name}` +
            this.valuesString();
    }
    valuesString() {
        if (this.values === null) {
            return '';
        }
        else if (typeof this.values === 'string') {
            return `(${this.values})`;
        }
        else { // if (is key-value object)
            if (Object.keys(this.values).length === 1) {
                const key = Object.keys(this.values)[0];
                return `(${key} = ${this.values[key]})`;
            }
            else {
                return '' +
                    `(\n${this.contentIndentString()}` +
                    Object.keys(this.values)
                        .map(key => `${key} = ${this.values[key]}`)
                        .join(`,\n${this.contentIndentString()}`) +
                    ')';
            }
        }
    }
}
exports.default = JavaAnnotation;
