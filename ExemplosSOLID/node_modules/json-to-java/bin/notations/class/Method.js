"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const J2JError_1 = tslib_1.__importDefault(require("../../utils/J2JError"));
const json_1 = require("../../utils/json");
const QuickConsole_1 = tslib_1.__importDefault(require("../../utils/QuickConsole"));
const Annotation_1 = require("../Annotation");
const BaseWithName_1 = tslib_1.__importDefault(require("../BaseWithName"));
const Modifier_1 = require("../basic/Modifier");
const Statement_1 = require("../basic/Statement");
const VariableDifinition_1 = require("../basic/VariableDifinition");
function parseMethods(emitter, fieldName, receiver, methodJson, currentIndent) {
    methodJson.forEach((attribute, index) => {
        if (json_1.JsonUtil.isJsonObject(attribute)) {
            receiver.push(new JavaClassMethod(currentIndent, attribute));
        }
        else {
            throw J2JError_1.default.elementTypeError(emitter, fieldName, index, methodJson.length, Object);
        }
    });
}
exports.parseMethods = parseMethods;
class JavaClassMethod extends BaseWithName_1.default {
    constructor(currentIndent, json) {
        super(currentIndent, json.name);
        this.annotations = [];
        this.accessModifier = null;
        this.nonAccessModifiers = [];
        this.type = 'void';
        this.arguments = [];
        this.statements = [];
        this.nameWhenAsEmitter = 'Method';
        if ('annotations' in json) {
            if (json_1.JsonUtil.isJsonArray(json.annotations)) {
                Annotation_1.parseAnnotations(this, 'annotations', this.annotations, json.annotations, currentIndent);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'annotations', Array);
            }
        }
        if ('accessModifier' in json) {
            if (Modifier_1.isJavaAccessModifier(json.accessModifier)) {
                this.accessModifier = json.accessModifier;
            }
            else {
                throw J2JError_1.default.valueNotAccepted(this, 'accessModifier', json.accessModifier);
            }
        }
        if ('nonAccessModifiers' in json) {
            if (json_1.JsonUtil.isJsonArray(json.nonAccessModifiers)) {
                Modifier_1.parseNonAccessModifiers(this, 'nonAccessModifiers', this.nonAccessModifiers, json.nonAccessModifiers);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'nonAccessModifiers', Array);
            }
        }
        if ('type' in json) {
            if (typeof json.type === 'string') {
                this.type = json.type;
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'type', String);
            }
        }
        if ('arguments' in json) {
            if (json_1.JsonUtil.isJsonArray(json.arguments)) {
                VariableDifinition_1.parseVariableDifinitions(this, 'arguments', this.arguments, json.arguments, currentIndent);
            }
        }
        if ('statements' in json) {
            if (json_1.JsonUtil.isJsonArray(json.statements)) {
                Statement_1.parseJavaStatements(this.statements, json.statements, currentIndent);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'statements', Array);
            }
        }
    }
    toString() {
        return '' +
            this.annotations.join('') +
            `\n${this.currentIndentString}` +
            (this.accessModifier ? `${this.accessModifier} ` : '') +
            this.nonAccessModifiers.join(' ') + (this.nonAccessModifiers.length > 0 ? ' ' : '') +
            `${this.type} ` +
            `${this.name} ` +
            `(${this.arguments.join(', ')}) {` +
            Statement_1.JavaStatementToString(this.statements, depth => this.contentIndentString(depth)) +
            `\n${this.currentIndentString}}`;
    }
}
exports.default = JavaClassMethod;
