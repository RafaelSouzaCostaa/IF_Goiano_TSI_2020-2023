"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const J2JError_1 = tslib_1.__importDefault(require("../utils/J2JError"));
const json_1 = require("../utils/json");
const QuickConsole_1 = tslib_1.__importDefault(require("../utils/QuickConsole"));
const Annotation_1 = require("./Annotation");
const BaseWithName_1 = tslib_1.__importDefault(require("./BaseWithName"));
const Modifier_1 = require("./basic/Modifier");
const Attribute_1 = require("./class/Attribute");
const Constructor_1 = require("./class/Constructor");
const Method_1 = require("./class/Method");
function parseClasses(emitter, fieldName, receiver, classJson, currentIndent) {
    classJson.forEach((claz, index) => {
        if (json_1.JsonUtil.isJsonObject(claz)) {
            receiver.push(new JavaClass(currentIndent, claz));
        }
        else {
            throw J2JError_1.default.elementTypeError(emitter, fieldName, index, classJson.length, Object);
        }
    });
}
exports.parseClasses = parseClasses;
class JavaClass extends BaseWithName_1.default {
    constructor(currentIndent, json) {
        super(currentIndent, json.name);
        this.annotations = [];
        this.accessModifier = null;
        this.nonAccessModifiers = [];
        this.extends = null;
        this.implements = [];
        this.attributes = [];
        this.constructors = [];
        this.methods = [];
        this.classes = [];
        this.nameWhenAsEmitter = 'Class';
        if ('annotations' in json) {
            if (json_1.JsonUtil.isJsonArray(json.annotations)) {
                Annotation_1.parseAnnotations(this, 'annotations', this.annotations, json.annotations, currentIndent);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'annotations', Array);
            }
        }
        if ('accessModifier' in json) {
            if (Modifier_1.isJavaAccessModifier(json.accessModifier)) {
                this.accessModifier = json.accessModifier;
            }
            else {
                throw J2JError_1.default.valueNotAccepted(this, 'accessModifier', json.accessModifier);
            }
        }
        if ('nonAccessModifiers' in json) {
            if (json_1.JsonUtil.isJsonArray(json.nonAccessModifiers)) {
                Modifier_1.parseNonAccessModifiers(this, 'nonAccessModifiers', this.nonAccessModifiers, json.nonAccessModifiers);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'nonAccessModifiers', Array);
            }
        }
        if ('extends' in json) {
            if (typeof json.extends === 'string') {
                this.extends = json.extends;
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'extends', String);
            }
        }
        if ('implements' in json) {
            if (json_1.JsonUtil.isJsonArray(json.implements)) {
                this.implements = json.implements.map((implement, index, impls) => {
                    if (typeof implement !== 'string') {
                        QuickConsole_1.default.warnElementType(this, 'implements', index, impls.length, String);
                    }
                    return String(implement);
                });
            }
            else {
                this.implements = [String(json.implements)];
            }
        }
        if ('attributes' in json) {
            if (json_1.JsonUtil.isJsonArray(json.attributes)) {
                Attribute_1.parseAttributes(this, 'attributes', this.attributes, json.attributes, currentIndent + 1);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'attributes', Array);
            }
        }
        if ('constructors' in json) {
            if (json_1.JsonUtil.isJsonArray(json.constructors)) {
                Constructor_1.parseConstructors(this, 'constructors', this.name, this.constructors, json.constructors, currentIndent + 1);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'constructors', Array);
            }
        }
        if ('methods' in json) {
            if (json_1.JsonUtil.isJsonArray(json.methods)) {
                Method_1.parseMethods(this, 'methods', this.methods, json.methods, currentIndent + 1);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'methods', Array);
            }
        }
        if ('classes' in json) {
            if (json_1.JsonUtil.isJsonArray(json.classes)) {
                parseClasses(this, 'classes', this.classes, json.classes, currentIndent + 1);
            }
            else {
                QuickConsole_1.default.warnIgnoreField(this, 'classes', Array);
            }
        }
    }
    toString() {
        return '' +
            this.annotations.join('') +
            `\n${this.currentIndentString}` +
            (this.accessModifier ? `${this.accessModifier} ` : '') +
            this.nonAccessModifiers.join(' ') + (this.nonAccessModifiers.length > 0 ? ' ' : '') +
            `class ${this.name} ` +
            (this.extends ? `extends ${this.extends} ` : '') +
            (this.implements.length > 0 ? `implements ${this.implements.join(', ')} ` : '') +
            '{' +
            this.attributes.join('') + (this.attributes.length > 0 ? '\n' : '') +
            this.constructors.join('') + (this.constructors.length > 0 ? '\n' : '') +
            this.methods.join('') + (this.methods.length > 0 ? '\n' : '') +
            this.classes.join('') +
            `\n${this.currentIndentString}}`;
    }
}
exports.default = JavaClass;
