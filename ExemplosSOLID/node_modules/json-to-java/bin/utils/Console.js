"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const J2JError_1 = tslib_1.__importDefault(require("./J2JError"));
// tslint:disable no-console
class Console {
    constructor() {
    }
    static stringifyEmitter(emitter) {
        if (emitter === null || emitter === undefined) {
            return '';
        }
        if (typeof emitter === 'string') {
            return `[ ${emitter} ]`;
        }
        const name = emitter.name ? ` (${emitter.name})` : '';
        if (emitter.nameWhenAsEmitter) {
            return `[ ${emitter.nameWhenAsEmitter}${name} ]`;
        }
        if (emitter.constructor) {
            return `[ ${emitter.constructor.name}${name} ]`;
        }
        return '';
    }
    static log(emitter, message) {
        if (this.LOG_INTERCEPTOR) {
            this.LOG_INTERCEPTOR(emitter, message);
        }
        else {
            console.log(`[ J2J ][ Log ]${this.stringifyEmitter(emitter)}`, message);
        }
    }
    static warn(emitter, message) {
        if (this.WARNING_INTERCEPTOR) {
            this.WARNING_INTERCEPTOR(emitter, message);
        }
        else {
            console.warn(`[ J2J ][ Warning ]${this.stringifyEmitter(emitter)}`, message);
        }
    }
    static error(emitter, err) {
        if (!(err instanceof Error)) {
            err = new J2JError_1.default(null, err);
        }
        if (this.ERROR_INTERCEPTOR) {
            this.ERROR_INTERCEPTOR(emitter, err);
        }
        else {
            console.error(err);
            console.error(`[ J2J ][ Error ]${this.stringifyEmitter(emitter)}`, 'An error had occured:', err.message);
        }
    }
}
exports.default = Console;
Console.LOG_INTERCEPTOR = null;
Console.WARNING_INTERCEPTOR = null;
Console.ERROR_INTERCEPTOR = null;
